<?php

/**
 * @file
 * Functional tests for the commerce price list module.
 */


/**
 * Abstract class for Commerce price list testing. All Commerce price list tests should
 * extend this class.
 */
abstract class CommercePricelistTestCase extends CommerceBaseTestCase {

  /**
   * Helper function to  perform the common test tasks for price list testing.
   * @see CommerceBaseTestCase::setUpHelper()
   */
  protected function setUpHelper($set = 'all', array $other_modules = array()) {
    $modules = parent::setUpHelper($set, $other_modules);
    parent::setUp($modules);

    $this->store_admin = $this->createStoreAdmin();
    $this->store_customer = $this->createStoreCustomer();
  }

  public function createDummyPricelist($vars) {
    $new_pricelist = entity_get_controller('commerce_pricelist_list')->create();
    $new_pricelist->title = empty($vars['title']) ? $this->randomName(10) : $vars['title'];
    $new_pricelist->weight = empty($vars['weight']) ? 0 : $vars['weight'];

    commerce_pricelist_list_save($new_pricelist);

    return $new_pricelist;
  }

  public function createDummyPricelistItem($vars) {
    $new_pricelist_item = entity_get_controller('commerce_pricelist_item')->create();
    foreach($vars as $key => $value) {
      $new_pricelist_item->$key = $value;
    }

    commerce_pricelist_item_save($new_pricelist_item);

    return $new_pricelist_item;
  }
}


/**
 * Test price list features for a product display that only has one product attached.
 */
class CommercePricelistTestCaseSimpleProduct extends CommercePricelistTestCase {
  /**
   * Product that is being added to the cart.
   */
  protected $product;

  /**
   * Product display.
   */
  protected $product_node;

  /**
   * Pricelist with higher priority.
   */
  protected $pricelist_a;

  /**
   * Pricelist with lower priority.
   */
  protected $pricelist_b;


  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Shopping cart',
      'description' => 'Test price list features like adding products to the cart, removing products from the price list and updating quantities.',
      'group' => 'Drupal Commerce',
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    parent::setUpHelper('all');
    // Create a dummy product display content type.
    $this->createDummyProductDisplayContentType();

    // Create dummy product display nodes (and their corresponding product
    //  entities).
    $sku = 'PROD-01';
    $product_name = 'Product One';
    $this->product = $this->createDummyProduct($sku, $product_name);
    $this->product_node = $this->createDummyProductNode(array($this->product->product_id), $product_name);
    $this->pricelist_a = $this->createDummyPricelist('A', 0);
    $this->pricelist_b = $this->createDummyPricelist('B', 1);

    // Log in as a normal user to test price list process.
    $this->drupalLogin($this->store_customer);

    // Submit the add to cart form.
    $this->drupalPost('node/' . $this->product_node->nid, array(), t('Add to cart'));
  }

	/**
   * Test if the product form has the correct structure.
   */
  public function testCommercePricelistProductFormStructure() {
    // Go to price list url.
    $this->drupalGet('node/' . $this->product_node->nid);

    $this->assertField('edit-submit', t('Add to price list button exists'));
  }

  /**
   * Test if the product has been correctly added to the cart.
   */
  public function testCommercePricelistAdd() {
    // Ensure the add to price list message is displayed.
    $message = t('%title added to <a href="!cart-url">your cart</a>.', array('%title' => $this->product_node->title, '!cart-url' => url('cart')));
    $this->assertRaw($message, t('Product add to price list message displayed.'));

    // Go to price list url.
    $this->drupalGet($this->getCommerceUrl('cart'));

    // Test if the page resolves and there is something in the cart.
    $this->assertResponse(200);
    $this->assertNoText(t('Your shopping price list is empty.'), t('Cart is not empty'));
    $this->assertText($this->product->title, t('Product was added to the cart'));
  }

	/**
   * Test if the price list form has the correct fields and structure.
   */
  public function testCommercePricelistFormStructure() {
    // Check if the form is present and it has the quantity field, remove and
    //  submit buttons.
    // Go to price list url.
    $this->drupalGet($this->getCommerceUrl('cart'));

    // Check remove button.
    $this->assertFieldByXPath("//input[starts-with(@id, 'edit-edit-delete')]", NULL, t('Remove button present'));

    // Check quantity field.
    $this->assertFieldByXPath("//input[starts-with(@id, 'edit-edit-quantity')]", NULL, t('Quantity field present'));
    $this->assertFieldByXPath("//input[starts-with(@id, 'edit-edit-quantity')]", 1, t('Quantity field has correct number of items'));

    // Check if the Update price list and Checkout buttons are present.
    $this->assertField("edit-submit", t('Update price list button present'));
    $this->assertField("edit-checkout", t('Checkout button present'));
  }

	/**
   * Test if the product is present in the order stored in db.
   */
  public function testCommercePricelistOrder() {
    // Load the current order of the user.
    $order = commerce_cart_order_load($this->store_customer->uid);
    $products = array();
    $this->assertTrue(commerce_cart_order_is_cart($order), t('User has currently an order in price list status.'));
    // Get the products out of the order and store them in an array.
    foreach (entity_metadata_wrapper('commerce_order', $order)->commerce_line_items as $delta => $line_item_wrapper) {
       if (in_array($line_item_wrapper->getBundle(), commerce_product_line_item_types())) {
         $product = $line_item_wrapper->commerce_product->value();
         $products[$product->product_id]= $product;
       }
    }
    // Check if the product is in the products array for the order.
    $this->assertTrue(in_array($this->product->product_id, array_keys($products)), t('Product is actually in the cart'));
  }

	/**
   * Test the quantity changes in the cart.
   */
  public function testCommercePricelistChangeQty() {
    // Go to price list url.
    $this->drupalGet($this->getCommerceUrl('cart'));
    // Change quantity in the price list view form.
    // We search for the first quantity field in the html and change the
    //   amount there.
    $qty = $this->xpath("//input[starts-with(@name, 'edit_quantity')]");
    $this->drupalPost($this->getCommerceUrl('cart'), array((string) $qty[0]['name'] => 2), t('Update cart'));
    // Check if the amount has been really changed.
    $this->assertFieldByXPath("//input[starts-with(@id, 'edit-edit-quantity')]", 2, t('Cart updated with new quantity'));
  }

	/**
   * Test removing a product from the cart.
   */
  public function testCommercePricelistRemove() {
    // Go to price list url.
    $this->drupalGet($this->getCommerceUrl('cart'));
    // Remove the product from the cart.
    $this->drupalPost(NULL, array(), t('Remove'));
    // Test if the page resolves and there is something in the cart.
    $this->assertText(t('Your shopping price list is empty.'), t('Removed product and price list is empty'));
  }
}
