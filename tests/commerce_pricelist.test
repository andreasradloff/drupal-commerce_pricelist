<?php

/**
 * @file
 * Functional tests for the commerce price list module.
 */


/**
 * Abstract class for Commerce price list testing. All Commerce price list tests should
 * extend this class.
 */
abstract class CommercePricelistTestCase extends CommerceBaseTestCase {

  /**
   * Helper function to  perform the common test tasks for price list testing.
   * @see CommerceBaseTestCase::setUpHelper()
   */
  protected function setUpHelper($set = 'all', array $other_modules = array()) {
    $other_modules[] = 'commerce_pricelist';
    $modules = parent::setUpHelper($set, $other_modules);
    parent::setUp($modules);

    $this->store_admin = $this->createStoreAdmin();
    $this->store_customer = $this->createStoreCustomer();
  }

  public function createDummyPricelist($vars = array()) {
    $new_pricelist = entity_get_controller('commerce_pricelist_list')->create();
    $new_pricelist->title = empty($vars['title']) ? $this->randomName(10) : $vars['title'];
    $new_pricelist->weight = empty($vars['weight']) ? 0 : $vars['weight'];

    commerce_pricelist_list_save($new_pricelist);

    return $new_pricelist;
  }

  public function createDummyPricelistItem($vars = array()) {
    $defaults = array(
      'pricelist_uuid' => $this->pricelist_a->uuid,
      'sku' => $this->product->sku,
      'price_amount' => 100,
      'currency_code' => 'USD'
    );

    $vars += $defaults;
    $new_pricelist_item = entity_get_controller('commerce_pricelist_item')->create();
    foreach($vars as $key => $value) {
      $new_pricelist_item->$key = $value;
    }

    commerce_pricelist_item_save($new_pricelist_item);

    return $new_pricelist_item;
  }
}


/**
 * Test price list features for a product display that only has one product attached.
 */
class CommercePricelistTestCaseSimpleProduct extends CommercePricelistTestCase {
  /**
   * Product that is being added to the cart.
   */
  protected $product;

  /**
   * Product display.
   */
  protected $product_node;

  /**
   * Pricelist with higher priority.
   */
  protected $pricelist_a;

  /**
   * Pricelist with lower priority.
   */
  protected $pricelist_b;


  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Commerce Pricelist',
      'description' => 'Test price list features like setting the price from a price list',
      'group' => 'Drupal Commerce',
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    parent::setUpHelper('all');
    // Create a dummy product display content type.
    $this->createDummyProductDisplayContentType();

    // Create dummy product display nodes (and their corresponding product
    //  entities).
    $sku = 'PROD-01';
    $product_name = 'Product One';
    $this->product = $this->createDummyProduct($sku, $product_name, 0);
    $this->product_node = $this->createDummyProductNode(array($this->product->product_id), $product_name);
    $this->pricelist_a = $this->createDummyPricelist('A', 0);
    $this->pricelist_b = $this->createDummyPricelist('B', 1);

    // Log in as a normal user to test price list process.
    $this->drupalLogin($this->store_customer);
  }

  /**
   * Test that product with price zero are deactivated.
   */
  public function testCommercePricelistDeactivateZeroPriceProduct() {
    $this->drupalGet('node/' . $this->product_node->nid);
    $this->assertRaw(t('Product not available'), t('Product was correctly disabled'));
  }

  /**
   * Test if the price of a product changes when a price list item is added.
   */
  public function testCommercePricelistItemAdd() {

    // Add pricelist item.
    $item_a = $this->createDummyPricelistItem();
    $item_b = $this->createDummyPricelistItem(array(
      'price_amount' => 75,
      'quantity' => 2
    ));

    // Go to product display page
    $this->drupalGet('node/' . $this->product_node->nid);
    $this->assertRaw(t('Add to cart'), t('Product was correctly enabled.'));
    $this->assertText('$1.00', t('Product price was correctly set from price list.'));

    // Add to product to cart.
    $this->drupalPost('node/' . $this->product_node->nid, array(), t('Add to cart'));

    // Go to cart.
    $this->drupalGet($this->getCommerceUrl('cart'));
    // Change quantity in the cart view form.
    // We search for the first quantity field in the html and change the
    //   amount there.
    $qty = $this->xpath("//input[starts-with(@name, 'edit_quantity')]");
    $this->drupalPost($this->getCommerceUrl('cart'), array((string) $qty[0]['name'] => 2), t('Update cart'));
    // Check if the amount has been really changed.
    $this->assertText('$0.75', t('Product price was correctly set from price list for different quantities.'));

    // Clean up.
    commerce_pricelist_item_delete($item_a);
    commerce_pricelist_item_delete($item_b);
  }
}
